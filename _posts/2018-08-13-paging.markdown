---
layout: post
title:  "Paging: Paged List Adapter"
date:   2018-08-13 02:20:00 +0900
categories: android
---

[GDG 판교의 ANDROID & CHAIN](https://festa.io/events/62)에서 [Paging: Paged List Adapter](https://github.com/dalinaum/paged-list-adpater-demo/blob/master/paging.pdf)를 발표하였는데 발표 내용을 정리한다.

![표지]({{ "/assets/paging1.png" | absolute_url }})

페이징 처리를 해주는 안드로이드의 구현, [PagedListAdapter](https://developer.android.com/reference/android/arch/paging/PagedListAdapter)를 소개하는 자리를 가졌다.

발표가 20분의 길이기 때문에 PagedListAdapter에 대해 자세히 설명할 수는 없었다. 최대한 간단하게 사용법을 소개해주는 것을 목표로 했다.

![PokeAPI]({{ "/assets/paging2.png" | absolute_url }})

REST API로 페이징을 하는 것을 보여주려는 것이 목적인데 간단한 API를 직접 만드는 것은 비효율적이라 생각했다. 그래서 무료 REST API가 있을지 검색해보니 포케몬을 검색할 수 있는 [PokeAPI](https://pokeapi.co)를 찾았다.

JSON 요청을 정리하면 아래와 같은 형식이다.

```json
{
 "count": 949,
 "previous": null,
 "results": [
   {
   "url": "https:\/\/pokeapi.co\/api\/v2\/pokemon\/1\/"
  ,
   "name": "bulbasaur"
   },
   ...
   {
   "url": "https:\/\/pokeapi.co\/api\/v2\/pokemon\/20\/"
  ,
   "name": "raticate"
   }
 ],
 "next": "https:\/\/pokeapi.co\/api\/v2\/pokemon\/?limit=20&offset=20"
}
```

```kotlin
data class Response(
 val count: Int,
 val previous: String,
 val next: String,
 val results: List<Result>
)
data class Result(
 val url: String,
 val name: String
)
```

`results`에 들어있는 `url`과 `name`을 `Result` 객체로 정리했고 `results`, `count`, `previous`, `next`를 묶어 `Response`로 정리했다.

이 부분과 아래 부분은 Paging 라이브러리를 쓰지 않을 때와 동일하다.

```kotlin
interface PokeAPI {
 @GET("pokemon/")
 fun listPokemons(): Call<Response>

 @GET("pokemon/")
 fun listPokemons(
   @Query("offset") offset: String,
   @Query("limit") limit: String
 ): Call<Response>
}
```

인터페이스를 정의하는 방식도 일반적인 어댑터 패턴을 쓸 때와 크게 다르지 않다.

```kotlin
private class DiffItemCallback : DiffUtil.ItemCallback<Result>() {
 override fun areItemsTheSame(oldItem: Result, newItem: Result): Boolean =
 oldItem.url == newItem.url
 override fun areContentsTheSame(oldItem: Result, newItem: Result): Boolean =
 oldItem.name == newItem.name && oldItem.url == newItem.url
}
```

페이징 라이브러리를 쓸 때 느껴지는 첫번째 큰 차이는 `DiffUtil.ItemCallback`을 구현해야한다는 점이다. `DiffUtil`을 사용하여 변경점을 확인한다.

`areItemsTheSame`은 ID가 같은지 확인하여 같은 대상을 의미하는 객체인지 확인한다. 같은 대상이라도 갱신 시점 등에 따라 데이터의 내용이 다를 수 있기 때문에 `areContentsTheSame`을 호출하여 데이터의 변경을 알려주는 것이다.

```kotlin
private class DataSource(private val pokeAPI: PokeAPI) : PageKeyedDataSource<String, Result>() {
  override fun loadInitial(params: LoadInitialParams<String>, callback: LoadInitialCallback<String,
Result>) {
    val body = pokeAPI.listPokemons().execute().body()
    callback.onResult(body!!.results, body.previous, body.next)
 }

  override fun loadBefore(params: LoadParams<String>, callback: LoadCallback<String, Result>) {
    val map = handleKey(params.key)
    val body = pokeAPI.listPokemons(map["offset"]!!, map["limit"]!!).execute().body()
    callback.onResult(body!!.results, body.previous)
  }

  override fun loadAfter(params: LoadParams<String>, callback: LoadCallback<String, Result>) {
    val map = handleKey(params.key)
    val body = pokeAPI.listPokemons(map["offset"]!!, map["limit"]!!).execute().body()
 callback.onResult(body!!.results, body.next)
  }
  // 중략
 ```

 페이징 라이브러리에서 데이터를 가져오는 과정은 `DataSource`로 위임한다. `loadInitial`에는 처음에 가져와야할 데이터를 담당하며, `loadBefore`와 `loadAfter`는 각각 이전 페이지와 다음 페이지를 가져온다.

 데이터를 가져온 후 `callback.onResult`를 호출하여 받아온 데이터와 다음에 사용할 키를 전달한다.

 주의할 점은 `DataSource`가 자체적으로 데이터를 비동기상태로 가져오기 위해 백그라운드 스레드를 사용하기 때문에 `loadXXX`에서 UI 스레드등에서 사용하는 메서드를 호출해서는 안된다눈 점이다.

 ```kotlin
private class Adapter : PagedListAdapter<Result, VieHolder>(DiffItemCallback()) {
  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VieHolder =
 VieHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_recyclerview, parent,
false))

  override fun onBindViewHolder(holder: VieHolder, position: Int) {
    getItem(position)?.let { (_, name) ->
      holder.title = name
    }
  }
}
```

어댑터는 `PagedListAdapter`를 상속받고 생성자는`DiffUtil.ItemCallback`을 전달해야 한다.

데이터를 가져오는 과정을 `PagedListAdapter`와 `DataSrouce`에서 하기 떄문에 우리가 구현해야할 코드의 분량은 매우 적다.

```kotlin
private fun createLiveData(): LiveData<PagedList<Result>> {
  val config = PagedList.Config.Builder()
    .setInitialLoadSizeHint(20)
    .setPageSize(20)
    .setPrefetchDistance(10)
    .build()
  return LivePagedListBuilder(object : android.arch.paging.DataSource.Factory<String,
  Result>() {
    override fun create(): android.arch.paging.DataSource<String, Result> {
      return MainActivity.DataSource(pokeAPI)
    }
  }, config).build()
}
```

설정을 만들어 초기에 가져올 사이즈(`setInitialLoadSizeHint`)와 페이즈 당 아이템의 개수(`setPageSize`), 얼마만큼 남았을 때 다음 데이터를 가저올지(`setPrefetchDistance`)를 지정한다.

다음으로 팩토리를 만들어 데이터소스를 생성한다. Dagger등을 사용할 경우에는 여기에 해당 부분을 주입시킨다.

주의할 점은 반환 값이 `LiveData<PagedList<Result>>` 타입이라는 것이다. 반환값은 `Result` 타입이 `PagedList`에 담겨 있는데 이 리스트는 사용자가 추가하거나 삭제할 수 없고 데이터 소스에 의해 자동으로 관리된다. 그리고 `LiveData`의 형태로 `PagedList`의 변경을 클라이언트에게 알린다.

```kotlin
override fun onCreate(savedInstanceState: Bundle?) {
  super.onCreate(savedInstanceState)
  setContentView(R.layout.activity_main)
  recyclerView.apply {
    adapter = this@MainActivity.adapter
    layoutManager = LinearLayoutManager(this@MainActivity)
  }
  createLiveData().observe(this, Observer(adapter::submitList))
}
```

`LiveData<PagedList<Result>>`를 구독(`observe`)하여 변경 사항을 확인하고 어댑터의 `submitList`에 전달한다. 이 메서드는 `PagedList`에 원래 로직이 구현되어 있고 우리가 해야할 일은 별로 없다.

라이브 데이터는 새로운 페이지를 가져올 때 갱신되지 않는데 완전히 새로운 데이터 셋을 가져올 때만 변경되기 때문이다. 데이터 셋을 처음 가져올 때와 완전히 새로운 데이터를 가져올 때 만 observe가 호출된다.

발표자료와 슬라이드는 [Github 저장소](https://github.com/dalinaum/paged-list-adpater-demo)를 참고하라.
